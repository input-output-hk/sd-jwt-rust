// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(sdjwtwrapperFFI)
    import sdjwtwrapperFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_sdjwtwrapper_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_sdjwtwrapper_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

public protocol EncodingKeyValueProtocol: AnyObject {}

public class EncodingKeyValue:
    EncodingKeyValueProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_sdjwtwrapper_fn_clone_encodingkeyvalue(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_sdjwtwrapper_fn_free_encodingkeyvalue(pointer, $0) }
    }

    public static func fromBase64Secret(b64: String) throws -> EncodingKeyValue {
        return try EncodingKeyValue(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeSDJWTError.lift) {
            uniffi_sdjwtwrapper_fn_constructor_encodingkeyvalue_from_base64_secret(
                FfiConverterString.lower(b64), $0
            )
        })
    }

    public static func fromEcDer(ecDer: String) -> EncodingKeyValue {
        return EncodingKeyValue(unsafeFromRawPointer: try! rustCall {
            uniffi_sdjwtwrapper_fn_constructor_encodingkeyvalue_from_ec_der(
                FfiConverterString.lower(ecDer), $0
            )
        })
    }

    public static func fromEcPem(ecPem: String) throws -> EncodingKeyValue {
        return try EncodingKeyValue(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeSDJWTError.lift) {
            uniffi_sdjwtwrapper_fn_constructor_encodingkeyvalue_from_ec_pem(
                FfiConverterString.lower(ecPem), $0
            )
        })
    }

    public static func fromEdDer(edDer: String) -> EncodingKeyValue {
        return EncodingKeyValue(unsafeFromRawPointer: try! rustCall {
            uniffi_sdjwtwrapper_fn_constructor_encodingkeyvalue_from_ed_der(
                FfiConverterString.lower(edDer), $0
            )
        })
    }

    public static func fromEdPem(edPem: String) throws -> EncodingKeyValue {
        return try EncodingKeyValue(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeSDJWTError.lift) {
            uniffi_sdjwtwrapper_fn_constructor_encodingkeyvalue_from_ed_pem(
                FfiConverterString.lower(edPem), $0
            )
        })
    }

    public static func fromRsaDer(rsaDer: String) -> EncodingKeyValue {
        return EncodingKeyValue(unsafeFromRawPointer: try! rustCall {
            uniffi_sdjwtwrapper_fn_constructor_encodingkeyvalue_from_rsa_der(
                FfiConverterString.lower(rsaDer), $0
            )
        })
    }

    public static func fromRsaPem(rsaPem: String) throws -> EncodingKeyValue {
        return try EncodingKeyValue(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeSDJWTError.lift) {
            uniffi_sdjwtwrapper_fn_constructor_encodingkeyvalue_from_rsa_pem(
                FfiConverterString.lower(rsaPem), $0
            )
        })
    }

    public static func fromSecret(secret: String) -> EncodingKeyValue {
        return EncodingKeyValue(unsafeFromRawPointer: try! rustCall {
            uniffi_sdjwtwrapper_fn_constructor_encodingkeyvalue_from_secret(
                FfiConverterString.lower(secret), $0
            )
        })
    }
}

public struct FfiConverterTypeEncodingKeyValue: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = EncodingKeyValue

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> EncodingKeyValue {
        return EncodingKeyValue(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: EncodingKeyValue) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EncodingKeyValue {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: EncodingKeyValue, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeEncodingKeyValue_lift(_ pointer: UnsafeMutableRawPointer) throws -> EncodingKeyValue {
    return try FfiConverterTypeEncodingKeyValue.lift(pointer)
}

public func FfiConverterTypeEncodingKeyValue_lower(_ value: EncodingKeyValue) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEncodingKeyValue.lower(value)
}

public protocol JwkValueProtocol: AnyObject {
    func getJson() -> String
}

public class JwkValue:
    JwkValueProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_sdjwtwrapper_fn_clone_jwkvalue(self.pointer, $0) }
    }

    public convenience init(jwkJson: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeSDJWTError.lift) {
            uniffi_sdjwtwrapper_fn_constructor_jwkvalue_new(
                FfiConverterString.lower(jwkJson), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_sdjwtwrapper_fn_free_jwkvalue(pointer, $0) }
    }

    public func getJson() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_sdjwtwrapper_fn_method_jwkvalue_get_json(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypeJwkValue: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = JwkValue

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> JwkValue {
        return JwkValue(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: JwkValue) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> JwkValue {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: JwkValue, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeJwkValue_lift(_ pointer: UnsafeMutableRawPointer) throws -> JwkValue {
    return try FfiConverterTypeJwkValue.lift(pointer)
}

public func FfiConverterTypeJwkValue_lower(_ value: JwkValue) -> UnsafeMutableRawPointer {
    return FfiConverterTypeJwkValue.lower(value)
}

public protocol SdjwtHolderWrapperProtocol: AnyObject {
    func createPresentation(claimsToDiscloseJson: String, nonce: String?, aud: String?, holderKey: EncodingKeyValue?, signAlg: String?) throws -> String
}

public class SdjwtHolderWrapper:
    SdjwtHolderWrapperProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_sdjwtwrapper_fn_clone_sdjwtholderwrapper(self.pointer, $0) }
    }

    public convenience init(sdJwtWithDisclosures: String, serializationFormat: SdjwtSerializationFormat) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeSDJWTError.lift) {
            uniffi_sdjwtwrapper_fn_constructor_sdjwtholderwrapper_new(
                FfiConverterString.lower(sdJwtWithDisclosures),
                FfiConverterTypeSDJWTSerializationFormat.lower(serializationFormat), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_sdjwtwrapper_fn_free_sdjwtholderwrapper(pointer, $0) }
    }

    public func createPresentation(claimsToDiscloseJson: String, nonce: String?, aud: String?, holderKey: EncodingKeyValue?, signAlg: String?) throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeSDJWTError.lift) {
                uniffi_sdjwtwrapper_fn_method_sdjwtholderwrapper_create_presentation(self.uniffiClonePointer(),
                                                                                     FfiConverterString.lower(claimsToDiscloseJson),
                                                                                     FfiConverterOptionString.lower(nonce),
                                                                                     FfiConverterOptionString.lower(aud),
                                                                                     FfiConverterOptionTypeEncodingKeyValue.lower(holderKey),
                                                                                     FfiConverterOptionString.lower(signAlg), $0)
            }
        )
    }
}

public struct FfiConverterTypeSDJWTHolderWrapper: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SdjwtHolderWrapper

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SdjwtHolderWrapper {
        return SdjwtHolderWrapper(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SdjwtHolderWrapper) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SdjwtHolderWrapper {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SdjwtHolderWrapper, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeSDJWTHolderWrapper_lift(_ pointer: UnsafeMutableRawPointer) throws -> SdjwtHolderWrapper {
    return try FfiConverterTypeSDJWTHolderWrapper.lift(pointer)
}

public func FfiConverterTypeSDJWTHolderWrapper_lower(_ value: SdjwtHolderWrapper) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSDJWTHolderWrapper.lower(value)
}

public protocol SdjwtIssuerWrapperProtocol: AnyObject {
    func issueSdJwtAllLevel(userClaims: String, holderKey: JwkValue?, addDecoyClaims: Bool, serializationFormat: SdjwtSerializationFormat) throws -> String

    func issueSdJwtCustom(userClaims: String, jsonPaths: [String], holderKey: JwkValue?, addDecoyClaims: Bool, serializationFormat: SdjwtSerializationFormat) throws -> String

    func issueSdJwtNoSdClaims(userClaims: String, holderKey: JwkValue?, addDecoyClaims: Bool, serializationFormat: SdjwtSerializationFormat) throws -> String

    func issueSdJwtTopLevel(userClaims: String, holderKey: JwkValue?, addDecoyClaims: Bool, serializationFormat: SdjwtSerializationFormat) throws -> String
}

public class SdjwtIssuerWrapper:
    SdjwtIssuerWrapperProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_sdjwtwrapper_fn_clone_sdjwtissuerwrapper(self.pointer, $0) }
    }

    public convenience init(issuerKey: EncodingKeyValue, signAlg: String?) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_sdjwtwrapper_fn_constructor_sdjwtissuerwrapper_new(
                FfiConverterTypeEncodingKeyValue.lower(issuerKey),
                FfiConverterOptionString.lower(signAlg), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_sdjwtwrapper_fn_free_sdjwtissuerwrapper(pointer, $0) }
    }

    public func issueSdJwtAllLevel(userClaims: String, holderKey: JwkValue?, addDecoyClaims: Bool, serializationFormat: SdjwtSerializationFormat) throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeSDJWTError.lift) {
                uniffi_sdjwtwrapper_fn_method_sdjwtissuerwrapper_issue_sd_jwt_all_level(self.uniffiClonePointer(),
                                                                                        FfiConverterString.lower(userClaims),
                                                                                        FfiConverterOptionTypeJwkValue.lower(holderKey),
                                                                                        FfiConverterBool.lower(addDecoyClaims),
                                                                                        FfiConverterTypeSDJWTSerializationFormat.lower(serializationFormat), $0)
            }
        )
    }

    public func issueSdJwtCustom(userClaims: String, jsonPaths: [String], holderKey: JwkValue?, addDecoyClaims: Bool, serializationFormat: SdjwtSerializationFormat) throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeSDJWTError.lift) {
                uniffi_sdjwtwrapper_fn_method_sdjwtissuerwrapper_issue_sd_jwt_custom(self.uniffiClonePointer(),
                                                                                     FfiConverterString.lower(userClaims),
                                                                                     FfiConverterSequenceString.lower(jsonPaths),
                                                                                     FfiConverterOptionTypeJwkValue.lower(holderKey),
                                                                                     FfiConverterBool.lower(addDecoyClaims),
                                                                                     FfiConverterTypeSDJWTSerializationFormat.lower(serializationFormat), $0)
            }
        )
    }

    public func issueSdJwtNoSdClaims(userClaims: String, holderKey: JwkValue?, addDecoyClaims: Bool, serializationFormat: SdjwtSerializationFormat) throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeSDJWTError.lift) {
                uniffi_sdjwtwrapper_fn_method_sdjwtissuerwrapper_issue_sd_jwt_no_sd_claims(self.uniffiClonePointer(),
                                                                                           FfiConverterString.lower(userClaims),
                                                                                           FfiConverterOptionTypeJwkValue.lower(holderKey),
                                                                                           FfiConverterBool.lower(addDecoyClaims),
                                                                                           FfiConverterTypeSDJWTSerializationFormat.lower(serializationFormat), $0)
            }
        )
    }

    public func issueSdJwtTopLevel(userClaims: String, holderKey: JwkValue?, addDecoyClaims: Bool, serializationFormat: SdjwtSerializationFormat) throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeSDJWTError.lift) {
                uniffi_sdjwtwrapper_fn_method_sdjwtissuerwrapper_issue_sd_jwt_top_level(self.uniffiClonePointer(),
                                                                                        FfiConverterString.lower(userClaims),
                                                                                        FfiConverterOptionTypeJwkValue.lower(holderKey),
                                                                                        FfiConverterBool.lower(addDecoyClaims),
                                                                                        FfiConverterTypeSDJWTSerializationFormat.lower(serializationFormat), $0)
            }
        )
    }
}

public struct FfiConverterTypeSDJWTIssuerWrapper: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SdjwtIssuerWrapper

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SdjwtIssuerWrapper {
        return SdjwtIssuerWrapper(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SdjwtIssuerWrapper) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SdjwtIssuerWrapper {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SdjwtIssuerWrapper, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeSDJWTIssuerWrapper_lift(_ pointer: UnsafeMutableRawPointer) throws -> SdjwtIssuerWrapper {
    return try FfiConverterTypeSDJWTIssuerWrapper.lift(pointer)
}

public func FfiConverterTypeSDJWTIssuerWrapper_lower(_ value: SdjwtIssuerWrapper) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSDJWTIssuerWrapper.lower(value)
}

public protocol SdjwtVerifierWrapperProtocol: AnyObject {
    func getVerifiedClaims() -> String

    func verify(userClaimsJson: String) -> Bool
}

public class SdjwtVerifierWrapper:
    SdjwtVerifierWrapperProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_sdjwtwrapper_fn_clone_sdjwtverifierwrapper(self.pointer, $0) }
    }

    public convenience init(sdJwtPresentation: String, publicKey: String, expectedAud: String?, expectedNonce: String?, serializationFormat: SdjwtSerializationFormat) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeSDJWTError.lift) {
            uniffi_sdjwtwrapper_fn_constructor_sdjwtverifierwrapper_new(
                FfiConverterString.lower(sdJwtPresentation),
                FfiConverterString.lower(publicKey),
                FfiConverterOptionString.lower(expectedAud),
                FfiConverterOptionString.lower(expectedNonce),
                FfiConverterTypeSDJWTSerializationFormat.lower(serializationFormat), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_sdjwtwrapper_fn_free_sdjwtverifierwrapper(pointer, $0) }
    }

    public func getVerifiedClaims() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_sdjwtwrapper_fn_method_sdjwtverifierwrapper_get_verified_claims(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func verify(userClaimsJson: String) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_sdjwtwrapper_fn_method_sdjwtverifierwrapper_verify(self.uniffiClonePointer(),
                                                                              FfiConverterString.lower(userClaimsJson), $0)
                }
        )
    }
}

public struct FfiConverterTypeSDJWTVerifierWrapper: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SdjwtVerifierWrapper

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SdjwtVerifierWrapper {
        return SdjwtVerifierWrapper(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SdjwtVerifierWrapper) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SdjwtVerifierWrapper {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SdjwtVerifierWrapper, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeSDJWTVerifierWrapper_lift(_ pointer: UnsafeMutableRawPointer) throws -> SdjwtVerifierWrapper {
    return try FfiConverterTypeSDJWTVerifierWrapper.lift(pointer)
}

public func FfiConverterTypeSDJWTVerifierWrapper_lower(_ value: SdjwtVerifierWrapper) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSDJWTVerifierWrapper.lower(value)
}

public enum SdjwtError {
    case ConversionError(message: String)

    case DeserializationError(message: String)

    case DataFieldMismatch(message: String)

    case DuplicateDigestError(message: String)

    case DuplicateKeyError(message: String)

    case InvalidDisclosure(message: String)

    case InvalidArrayDisclosureObject(message: String)

    case InvalidPath(message: String)

    case IndexOutOfBounds(message: String)

    case InvalidState(message: String)

    case InvalidInput(message: String)

    case KeyNotFound(message: String)

    case Unspecified(message: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeSDJWTError.lift(error)
    }
}

public struct FfiConverterTypeSDJWTError: FfiConverterRustBuffer {
    typealias SwiftType = SdjwtError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SdjwtError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .ConversionError(
                message: FfiConverterString.read(from: &buf)
            )

        case 2: return try .DeserializationError(
                message: FfiConverterString.read(from: &buf)
            )

        case 3: return try .DataFieldMismatch(
                message: FfiConverterString.read(from: &buf)
            )

        case 4: return try .DuplicateDigestError(
                message: FfiConverterString.read(from: &buf)
            )

        case 5: return try .DuplicateKeyError(
                message: FfiConverterString.read(from: &buf)
            )

        case 6: return try .InvalidDisclosure(
                message: FfiConverterString.read(from: &buf)
            )

        case 7: return try .InvalidArrayDisclosureObject(
                message: FfiConverterString.read(from: &buf)
            )

        case 8: return try .InvalidPath(
                message: FfiConverterString.read(from: &buf)
            )

        case 9: return try .IndexOutOfBounds(
                message: FfiConverterString.read(from: &buf)
            )

        case 10: return try .InvalidState(
                message: FfiConverterString.read(from: &buf)
            )

        case 11: return try .InvalidInput(
                message: FfiConverterString.read(from: &buf)
            )

        case 12: return try .KeyNotFound(
                message: FfiConverterString.read(from: &buf)
            )

        case 13: return try .Unspecified(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SdjwtError, into buf: inout [UInt8]) {
        switch value {
        case .ConversionError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        case .DeserializationError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(2))
        case .DataFieldMismatch(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(3))
        case .DuplicateDigestError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(4))
        case .DuplicateKeyError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(5))
        case .InvalidDisclosure(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(6))
        case .InvalidArrayDisclosureObject(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(7))
        case .InvalidPath(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(8))
        case .IndexOutOfBounds(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(9))
        case .InvalidState(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(10))
        case .InvalidInput(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(11))
        case .KeyNotFound(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(12))
        case .Unspecified(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(13))
        }
    }
}

extension SdjwtError: Equatable, Hashable {}

extension SdjwtError: Error {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum SdjwtSerializationFormat {
    case json
    case compact
}

public struct FfiConverterTypeSDJWTSerializationFormat: FfiConverterRustBuffer {
    typealias SwiftType = SdjwtSerializationFormat

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SdjwtSerializationFormat {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .json

        case 2: return .compact

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SdjwtSerializationFormat, into buf: inout [UInt8]) {
        switch value {
        case .json:
            writeInt(&buf, Int32(1))

        case .compact:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeSDJWTSerializationFormat_lift(_ buf: RustBuffer) throws -> SdjwtSerializationFormat {
    return try FfiConverterTypeSDJWTSerializationFormat.lift(buf)
}

public func FfiConverterTypeSDJWTSerializationFormat_lower(_ value: SdjwtSerializationFormat) -> RustBuffer {
    return FfiConverterTypeSDJWTSerializationFormat.lower(value)
}

extension SdjwtSerializationFormat: Equatable, Hashable {}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeEncodingKeyValue: FfiConverterRustBuffer {
    typealias SwiftType = EncodingKeyValue?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeEncodingKeyValue.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeEncodingKeyValue.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeJwkValue: FfiConverterRustBuffer {
    typealias SwiftType = JwkValue?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeJwkValue.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeJwkValue.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_sdjwtwrapper_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_sdjwtwrapper_checksum_method_jwkvalue_get_json() != 63584 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_method_sdjwtholderwrapper_create_presentation() != 18906 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_method_sdjwtissuerwrapper_issue_sd_jwt_all_level() != 25401 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_method_sdjwtissuerwrapper_issue_sd_jwt_custom() != 46655 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_method_sdjwtissuerwrapper_issue_sd_jwt_no_sd_claims() != 21967 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_method_sdjwtissuerwrapper_issue_sd_jwt_top_level() != 47751 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_method_sdjwtverifierwrapper_get_verified_claims() != 44254 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_method_sdjwtverifierwrapper_verify() != 47986 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_constructor_encodingkeyvalue_from_base64_secret() != 21793 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_constructor_encodingkeyvalue_from_ec_der() != 43995 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_constructor_encodingkeyvalue_from_ec_pem() != 18580 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_constructor_encodingkeyvalue_from_ed_der() != 41054 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_constructor_encodingkeyvalue_from_ed_pem() != 42153 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_constructor_encodingkeyvalue_from_rsa_der() != 7668 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_constructor_encodingkeyvalue_from_rsa_pem() != 10996 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_constructor_encodingkeyvalue_from_secret() != 49236 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_constructor_jwkvalue_new() != 63572 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_constructor_sdjwtholderwrapper_new() != 61288 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_constructor_sdjwtissuerwrapper_new() != 36408 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_sdjwtwrapper_checksum_constructor_sdjwtverifierwrapper_new() != 48947 {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
